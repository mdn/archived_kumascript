<%
// Builds a documentation status page
//
// Parameters:
//  $0  -  The section to look at (e.g. "Web/JavaScript")
//  $1  -  (optional) Group tags. An array of tags to filter the section even more (only pages with these tags are included then; OR logic).
//  $2  -  (optional) Date for pages to be marked as outdated. 365 days and more is always outdated.
//  $3  -  (optional) Bugzilla query for dev-doc-needed
//  $4  -  (optional) Bugzilla query for documentaion requests
//  $5  -  (optional) Custom status metrics. Object containg the headline as the key and the metric number plus a anchor as an array.
//         e.g. { "cleanup": {"title": "Clean-up", "link": "#Cleanup_on_standard_built-in_ECMAScript_objects", "counter": 142 }}

/*** Module loading ***/
var MDN = require("MDN:Common");

/*** Variables ***/
var slug = $0;
var enURL = '';
if (slug.indexOf("/en-US") != -1) {
    enURL = slug;
} else {
    enURL = '/en-US/docs/' + slug;
}
var pageList = page.subpagesExpand(enURL);
var groupTags = [];
if ($1) {
    groupTags = JSON.parse($1);
}
var outdate = $2;
var bzddn = $3;
var bzdr = $4;
var cMetrics = $5;

// TODO: Use something like 'env.translations' here instead of a static list
var languages = ['bn-BD', 'de', 'es', 'fr', 'ja', 'pl', 'pt-BR', 'zh-CN', 'ko'];
var bugPageURL = 'https://bugzilla.mozilla.org/show_bug.cgi?id=';

var metrics = {
    pages: {
        title: 'Pages',
        link: enURL + '/Index',
        counter: 0
    },
    noTags: {
        title: 'No tags',
        link: '#No_tags',
        counter: 0
    },
    needsTags: {
        title: 'Needs* tags',
        link: '#Need_tags',
        counter: 0
    },
    editorialReviews: {
        title: 'Editorial reviews',
        link: '#Editorial_reviews',
        counter: 0
    },
    technicalReviews: {
        title: 'Technical reviews',
        link: '#Technical_reviews',
        counter: 0
    },
    outdated: {
        title: 'Outdated pages',
        link: '#Outdated_pages',
        counter: 0
    }
};

if (groupTags.length > 0) {
    metrics.noTags = undefined;
}

var output = {
    noTags: [],
    needsTags: [],
    editorialReviews: [],
    technicalReviews: [],
    outdated: []
};


/*** Add optional and custom metrics to the metrics object ***/
if (bzddn && bzddn != '') {
    metrics.ddn = {
        title:'Dev-doc-needed bugs',
        link: '#Dev-doc-needed_bugs',
        counter: 0
    };
}

if (bzdr && bzdr != '') {
    metrics.dr = {
        title: 'Documentation requests',
        link: '#Documentation_requests',
        counter: 0
    };
}

if (cMetrics && cMetrics != '') {
  var customMetrics = JSON.parse(cMetrics);
  for (var key in customMetrics) {
    metrics[key] = customMetrics[key];
  }
}


/*** Helper functions ***/


function hasTags(tags, needle) {
    if (!tags || tags == undefined) return 0;
    for (var i = 0, len = tags.length; i < len; i++) {
        if (tags[i].toLowerCase() === needle.toLowerCase()) return 1;
    }
    return 0;
}

function hasNoTags(tagList) {
    if (!tagList || tagList == undefined || tagList.length == 0) {
      return 1;
    }
    return 0;
}

function containsNeedsWorkTag(tagList) {
    if (!tagList || tagList == undefined) return 0;
    for (var i = 0, len = tagList.length; i < len; i++) {
        if (tagList[i].toLowerCase().substr(0, 5) == 'needs') return 1;
    }
    return 0;
}

function hasReviewTag(reviewTags, reviewType) {
    if (!reviewTags || reviewTags == undefined) return 0;
    for (var i = 0, len = reviewTags.length; i < len; i++) {
        if (reviewTags[i] === reviewType) return 1;
    }
    return 0;
}

function isOutdated(pageDate, compareDate) {
    if (!pageDate || pageDate == undefined) return 0;
    if (new Date(pageDate) < new Date(compareDate)) return 1;
    return 0;
}

function daysBetween(date1, date2) {
  var aDay = 1000*60*60*24;

  var d1ms = date1.getTime();
  var d2ms = date2.getTime();
  var diff = d2ms - d1ms;
    
  return Math.round(diff/aDay); 
}


/*** Get pages recursively by walking through the page tree and collect data ***/

function collect(page) {
    metrics.pages.counter++;
    var cleanTitle = page.title.replace('<','&lt;').replace('>','&gt;');
    var pageurl = page.url;
            
    if (hasNoTags(page.tags)) {
        metrics.noTags.counter++; 
        output.noTags.push({title: cleanTitle, url: pageurl});
    }
    if (containsNeedsWorkTag(page.tags)) {
        metrics.needsTags.counter++;
        var needsTags = page.tags.toString().match(/needs[A-Za-z0-9]+/gi).toString();
        var re = /,/g;
        needsTags = needsTags.replace(re, ', ');
        output.needsTags.push({title: cleanTitle, url: pageurl, note: needsTags});
    }
    if (hasReviewTag(page.review_tags, 'editorial')) { 
        metrics.editorialReviews.counter++;
        output.editorialReviews.push({title: cleanTitle, url: pageurl});
    }
    if (hasReviewTag(page.review_tags, 'technical')) { 
        metrics.technicalReviews.counter++;
        output.technicalReviews.push({title: cleanTitle, url: pageurl});
    }
    var pageAge = daysBetween(new Date(page.last_edit), new Date());
    if ((outdate != undefined && isOutdated(page.last_edit, outdate)) || pageAge > 365) {
        metrics.outdated.counter++;
        output.outdated.push({title: cleanTitle, url: pageurl, note: pageAge + ' days old'});
    }
}

function getPages(pageList) {
    if (pageList) {
        for (var i = 0; i < pageList.length; i++) {
            if (groupTags.length > 0) {
                for (var j = 0; j < groupTags.length; j++) {
                    if (hasTags(pageList[i].tags, groupTags[j])) {
                        collect(pageList[i]);
                    }
                }
            } else {
                collect(pageList[i]);
            }
            
            var subpage = getPages(pageList[i].subpages);
        }
    }
}

getPages(pageList);


/*** Bugzilla querying ***/


if (bzddn && bzddn != '') {
    var ddnBugs = MDN.bzSearch(bzddn);
    metrics.ddn.counter = ddnBugs.bugs.length;
}

if (bzdr && bzdr != '') {
    var drBugs = MDN.bzSearch(bzdr);
    metrics.dr.counter = drBugs.bugs.length;
}



/*** Output ***/



/*** Summary table ***/
%>
<table class="docstatussummary standard-table">
  <thead>
    <tr>
<%
for (var obj in metrics) {
if (metrics.hasOwnProperty(obj) && typeof metrics[obj] !== 'undefined') {
    var href = metrics[obj].link;
    if (href && href.indexOf('#', 0) === 0) {
        href = env.path + href;
    }
%>
    <th><a href="<%=href%>"><%=metrics[obj].title%></a></th>
<% }} %>
    </tr>
  </thead>
  <tbody>
    <tr>
<%
for (var obj in metrics) {
if (metrics.hasOwnProperty(obj) && typeof metrics[obj] !== 'undefined') {
    var percent = Math.ceil((metrics[obj].counter / metrics.pages.counter) * 100);
    var color = "rgb(204, 255, 153)";
    if (percent >= 5) { color = "rgb(255, 255, 153)" }
    if (percent >= 10) { color = "rgb(255, 204, 204)" }
    if (obj == 'pages') { 
%>
    <td><%=metrics.pages.counter%></td>
<% } else { %>
    <td style="background-color: <%=color%>;"><%=metrics[obj].counter%> (<%=percent%>%) </td>
<% }
}}%>
    </tr>
  </tbody>
</table>

<p>See also <a href="<%=env.url%>#Localizations">localization status</a> of this section.</p>


<% /*** page metrics ***/ %>


<% 
for (var obj in output) {
if (output.hasOwnProperty(obj) && output[obj].length > 0) {
%>
<h2 id="<%=metrics[obj].link.slice(1)%>"><%=metrics[obj].title%></h2>
<%
    var result = output[obj];
    switch(env.locale) {
    default:
        amount = "Found " + result.length + " pages:";
        break;
    }
%>

<p><strong><%=amount%></strong></p>
<div class="wideColumnBox wideColumnBoxList">
<ul>
<% for (i=0; i < result.length; i++) { %>
    <li><a href='<%=result[i].url%>'><%=result[i].title%></a><% if (result[i].note != undefined) { %><br/><small><%=result[i].note%></small><% } %></li>
<% } %>
</ul></div>
<% }} %>


<% /*** Bug lists ***/ %>

<% if (bzddn && bzddn != '') { 
    if (ddnBugs.bugs.length > 0) {
%>
    <h2 id="Dev-doc-needed_bugs">Dev-doc-needed bugs</h2>
    <p><strong>Found <%=ddnBugs.bugs.length%> bugs:</strong></p>
    
    <table class="standard-table">
        <thead>
            <tr>
                <th>Bug</th>
                <th>Summary</th>
                <th>Release</th>
            </tr>
        </thead>
    <tbody>
    
    <% for (var i=0; i < ddnBugs.bugs.length; i++) { %>
    <tr>
        <td><a href="<%= bugPageURL + ddnBugs.bugs[i].id %>"><%= ddnBugs.bugs[i].id %></a></td>
        <td><%= ddnBugs.bugs[i].summary %></td>
        <td><%= ddnBugs.bugs[i].target_milestone %></td>
    </tr>
    <% } %>
    
    </tbody>
    </table>
<% } } %>

<% if (bzdr && bzdr != '') { 
    if (drBugs.bugs.length > 0) {
%>
    <h2 id="Documentation_requests">Documentation requests</h2>
    <p><strong>Found <%=drBugs.bugs.length%> bugs:</strong></p>
    
    <table class="standard-table">
        <thead>
            <tr>
                <th>Bug</th>
                <th>Summary</th>
            </tr>
        </thead>
    <tbody>
    
    <% for (var i=0; i < drBugs.bugs.length; i++) { %>
    <tr>
        <td><a href="<%= bugPageURL + drBugs.bugs[i].id %>"><%= drBugs.bugs[i].id %></a></td>
        <td><%= drBugs.bugs[i].summary %></td>
    </tr>
    <% } %>
    
    </tbody>
    </table>
<% } } %>


<% /*** Localizations ***/ %>


<h2 id="Localizations">Localizations</h2>
<p>Please help us to localize this documentation into different languages.</p>

<% /* Once we have env.translations, build one table...
     Could calls localization status json to get the data, with env.translation we can make sure that it is there...
     eg.g https://developer.mozilla.org/fr/docs/MDN/Doc_status/CSS?raw&macros&section=json
<table class"standard-table">
    <thead>
        <tr>
            <th>Locale</th>
            <th>Pages</th> 
            <th>Translated</th> 
            <th>Translations up to date</th> 
        </tr>
    </thead>
    <tbody>
for (i=0; i < languages.length; i++) {

    <tr>
        <td><a href="/=languages[i] + '/docs/' + env.slug">=languages[i]</td>
        <td>491</td> 
        <td>38 (8%)</td> 
        <td>6 (16%)</td> 
    </tr>
    
}
    </tbody>
</table> */
%>

<div class="wideColumnBox wideColumnBoxList">
<% for (i=0; i < languages.length; i++) { %>
    <div style="display: inline-block;">
        <h3><a href="/<%=languages[i]%>/docs/<%=env.slug%>"><%=languages[i]%></a></h3>
        <%-template("page", ['/' + languages[i] + '/docs/' + env.slug, "Summary"])%>
    </div>
<% } %>
</div>


<% /*** Doc status metrics API :-) ***/ %>

<div id="json" style="display: none"><%=JSON.stringify(metrics) %></div>
