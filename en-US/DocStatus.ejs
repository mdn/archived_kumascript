<%
// Builds a documentation status page
//
// Parameters:
//  $0  -  The section to look at (e.g. "Web/JavaScript")
//  $1  -  Date for pages to be marked as outdated. 365 days and more is always outdated.
//  $2  -  Bugzilla query for dev-doc-needed
//  $3  -  Bugzilla query for documentaion requests
//  $4  -  Custom status metrics. Object containg the headline as the key and the metric number plus a anchor as an array.
//         e.g. { "cleanup": {"title": "Clean-up", "link": "#Cleanup_on_standard_built-in_ECMAScript_objects", "counter": 142 }}
/*** Module loading */
var Bugzilla = require("Bugzilla");

/*** Variables ***/
var slug = $0;
var enURL = '/en-us/docs/' + slug;
var pageList = page.subpagesExpand(enURL);
var outdate = $1;
var bzddn = $2;
var bzdr = $3;
var cMetrics = $4;

var languages = ['de', 'es', 'fr', 'ja', 'pl', 'pt-BR', 'zh-CN'];

var metrics = {
    pages: {
        title: 'Pages',
        link: enURL + '/Index',
        counter: 0
    },
    noTags: {
        title: 'No tags',
        link: '#No_tags',
        counter: 0
    },
    needsTags: {
        title: 'Needs* tags',
        link: '#Need_tags',
        counter: 0
    },
    editorialReviews: {
        title: 'Editorial reviews',
        link: '#Editorial_reviews',
        counter: 0
    },
    technicalReviews: {
        title: 'Technical reviews',
        link: '#Technical_reviews',
        counter: 0
    },
    outdated: {
        title: 'Outdated pages',
        link: '#Outdated_pages',
        counter: 0
    },
    ddn: {
        title:'Dev-doc-needed bugs',
        link: '#Dev-doc-needed_bugs',
        counter: 0
    },
    dr: {
        title: 'Documentation requests',
        link: '#Documentation_requests',
        counter: 0
    }
};

var output = {
    noTags: [],
    needsTags: [],
    editorialReviews: [],
    technicalReviews: [],
    outdated: []
};


/*** Add custom metrics to the metrics object ***/


if (cMetrics) {
  var customMetrics = JSON.parse(cMetrics);
  for (var key in customMetrics) {
    metrics[key] = customMetrics[key];
  }
}


/*** Helper functions ***/


function hasNoTags(tagList) {
    if (!tagList || tagList == undefined || tagList.length == 0) {
      return 1;
    }
    return 0;
}

function containsNeedsWorkTag(tagList) {
    if (!tagList || tagList == undefined) return 0;
    for (var i = 0, len = tagList.length; i < len; i++) {
        if (tagList[i].toLowerCase().substr(0, 5) == 'needs') return 1;
    }
    return 0;
}

function hasReviewTag(reviewTags, reviewType) {
    if (!reviewTags || reviewTags == undefined) return 0;
    for (var i = 0, len = reviewTags.length; i < len; i++) {
        if (reviewTags[i] === reviewType) return 1;
    }
    return 0;
}

function isOutdated(pageDate, compareDate) {
    if (!pageDate || pageDate == undefined) return 0;
    if (new Date(pageDate) < new Date(compareDate)) return 1;
    return 0;
}

function daysBetween(date1, date2) {
  var aDay = 1000*60*60*24;

  var d1ms = date1.getTime();
  var d2ms = date2.getTime();
  var diff = d2ms - d1ms;
    
  return Math.round(diff/aDay); 
}


/*** Get pages recursively by walking through the page tree and collect data ***/


function getPages(pageList) {
    if (pageList) {
        for (var i = 0; i < pageList.length; i++) {
            metrics.pages.counter++;
            if (hasNoTags(pageList[i].tags)) {
                metrics.noTags.counter++; 
                output.noTags.push({title: pageList[i].title.replace('<','&lt;').replace('>','&gt;'), url: pageList[i].url});
            }
            if (containsNeedsWorkTag(pageList[i].tags)) {
                metrics.needsTags.counter++;
                output.needsTags.push({title: pageList[i].title.replace('<','&lt;').replace('>','&gt;'), url: pageList[i].url, note: pageList[i].tags.toString().match(/needs[A-Za-z0-9]+/gi).toString()});
            }
            if (hasReviewTag(pageList[i].review_tags, 'editorial')) { 
                metrics.editorialReviews.counter++;
                output.editorialReviews.push({title: pageList[i].title.replace('<','&lt;').replace('>','&gt;'), url: pageList[i].url});
            }
            if (hasReviewTag(pageList[i].review_tags, 'technical')) { 
                metrics.technicalReviews.counter++;
                output.technicalReviews.push({title: pageList[i].title.replace('<','&lt;').replace('>','&gt;'), url: pageList[i].url});
            }
            var pageAge = daysBetween(new Date(pageList[i].last_edit), new Date());
            if ((outdate != undefined && isOutdated(pageList[i].last_edit, outdate)) || pageAge > 365) {
                metrics.outdated.counter++;
                output.outdated.push({title: pageList[i].title.replace('<','&lt;').replace('>','&gt;'), url: pageList[i].url, note: pageAge + ' days old'});
            }
            
            var subpage = getPages(pageList[i].subpages);
        }
    }
}

getPages(pageList);

/*** Bugzilla querying */

if (bzddn) {
    var bugs = Bugzilla.search(bzddn);
    log.debug(bugs);
}

/*** Output ***/


%>
<table class="docstatussummary standard-table">
  <thead>
    <tr>
<%
for (var obj in metrics) {
    var href = metrics[obj].link;
    if (href && href.indexOf('#', 0) === 0) {
        href = env.path + href;
    }
%>
    <th><a href="<%=href%>"><%=metrics[obj].title%></a></th>
<% } %>
    </tr>
  </thead>
  <tbody>
    <tr>
<%
for (var obj in metrics) {
    var percent = Math.ceil((metrics[obj].counter / metrics.pages.counter) * 100);
    var color = "rgb(204, 255, 153)";
    if (percent >= 5) { color = "rgb(255, 255, 153)" }
    if (percent >= 10) { color = "rgb(255, 204, 204)" }
    if (obj == 'pages') { 
%>
    <td><%=metrics.pages.counter%></td>
<% } else { %>
    <td style="background-color: <%=color%>;"><%=metrics[obj].counter%> (<%=percent%>%) </td>
<% }
}%>
    </tr>
  </tbody>
</table>

<p>See also <a href="<%=env.url%>#Localizations">localization status</a> of this section.</p>


<% for (var obj in output) { %>
<h2><%=metrics[obj].title%></h2>
<%
    var result = output[obj];
    switch(env.locale) {
    default:
        amount = "Found " + result.length + " pages:";
        break;
    }
%>

<p><strong><%=amount%></strong></p>
<div class="wideColumnBox wideColumnBoxList">
<ul>
<% for (i=0; i < result.length; i++) { %>
    <li><a href='<%=result[i].url%>'><%=result[i].title%></a><% if (result[i].note != undefined) { %><br/><small><%=result[i].note%></small><% } %></li>
<% } %>
</ul></div>
<% } %>
<h2>Localizations</h2>
<p>Please help us to localize this documentation into different languages.</p>
<ul>
<% for (i=0; i < languages.length; i++) { %>
        <li><a href="/<%=languages[i]%>/docs/<%=env.slug%>"><%=languages[i]%></a></li>
    <% } %>
</ul>
