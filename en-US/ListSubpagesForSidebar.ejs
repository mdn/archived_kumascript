<%
// Inserts a tree of subpages of the specified page to be used in the sidebar (quicklinks)
// Displays common flags/icons
// Includes the parent page at the top of the list.
//
// Parameters:
//  $0 - The path of the page whose subpages should be listed.
//  $1 - If true, do not put the text in <code></code>.

var path = $0;

// If the path ends with a slash, remove it.    
if (path.substr(-1, 1) === '/') {
    path = path.slice(0, -1);
}
    
var pages = page.subpagesExpand(path, -1, 1);
var containsTag = page.hasTag;
var escapeQuotes = mdn.escapeQuotes;
var htmlEscape = kuma.htmlEscape;

var output = '';
var openTag = '<ol>';
var closeTag = '</ol>';
var code    = !$1 ? '<code>'  : '';
var endcode = !$1 ? '</code>' : '';

var badges = {
    ExperimentalBadge : '<span class="sidebar-icon">' + template("ExperimentalBadge", [1]) + '</span>',
    NonStandardBadge  : '<span class="sidebar-icon">' + template("NonStandardBadge", [1]) + '</span>',
    DeprecatedBadge   : '<span class="sidebar-icon">' + template("DeprecatedBadge", [1]) + '</span>',
    ObsoleteBadge     : '<span class="sidebar-icon">' + template("ObsoleteBadge", [1]) + '</span>',
};

function createLink(item) {
    var result = '';
    var summary =  escapeQuotes(item.summary) || '';
    result += '<li>';
    
    if (containsTag(item, 'Experimental')) {
        result += badges.ExperimentalBadge;
    }
    
    if (containsTag(item, 'Non-standard') || containsTag(item, 'Non Standard')) {
        result += badges.NonStandardBadge;
    }
    
    if (containsTag(item, 'Deprecated')) {
        result += badges.DeprecatedBadge;
    }
    
    if (containsTag(item, 'Obsolete')) {
        result += badges.ObsoleteBadge;
    }
    
    result += '<a href="' + item.url + '" title="' + summary + '">' + code + htmlEscape(item.title) + endcode + '</a>' + '</li>';
    return result;
}

if (pages.length) {
    output += openTag;
    
    pages.forEach(function(item) {
        if (!item) { return; }
        output += createLink(item);
    });
    
    if (pages[0].subpages.length > 0) {
      pages[0].subpages.forEach(function(item) {
        if (!item) { return; }
        output += createLink(item);
      });
    }
    
    output += closeTag;
}
%>
<%- output %>
