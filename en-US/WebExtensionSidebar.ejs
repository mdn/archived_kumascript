<%
var output = "hello<br/>";

var slug = env.slug;
var locale = env.locale;
var pageModule = page;
var hasTag = page.hasTag;
var escapeQuotes = mdn.escapeQuotes;
var htmlEscape = kuma.htmlEscape;
var rtlLocales = ['ar', 'he', 'fa'];


var badges = {
  ExperimentalBadge : '<span class="sidebar-icon">' + template("ExperimentalBadge", [1]) + '</span>',
  NonStandardBadge  : '<span class="sidebar-icon">' + template("NonStandardBadge", [1]) + '</span>',
  DeprecatedBadge   : '<span class="sidebar-icon">' + template("DeprecatedBadge", [1]) + '</span>',
  ObsoleteBadge     : '<span class="sidebar-icon">' + template("ObsoleteBadge", [1]) + '</span>',
}

function buildSublist(pages, title) {
  var result = '<li data-default-state="open"><a href="#"><strong>' + title + '</strong></a><ol>';

  for (var i in pages) {
    var aPage = pages[i];
    var summary = escapeQuotes(aPage.summary) || '';
    var url = aPage.url.replace('en-US', locale);
    var title = htmlEscape(aPage.title);
    
    var translated = false;
    if (locale != 'en-US') {
        aPage.translations.forEach(function(translation){
            if(translation.locale === locale) {
                summary = escapeQuotes(translation.summary) || '';
                url = translation.url;
                title = htmlEscape(translation.title);
                translated = true;
            }
        });
    }
    
    var cta = '';
     if (!translated && locale != 'en-US') {
        cta += ' <a href="'+ url +'$translate" style="opacity:0.5" title="'+ text['title'] + '">' + text['translate'] + '</a>';
    }
    
    
    result += '<li>';
    
    if (hasTag(aPage, 'Experimental')) {
        result += badges.ExperimentalBadge;
    }

    if (hasTag(aPage, 'Non-standard') || hasTag(aPage, 'Non Standard')) {
        result += badges.NonStandardBadge;
    }

    if (hasTag(aPage, 'Deprecated')) {
        result += badges.DeprecatedBadge;
    }

    if (hasTag(aPage, 'Obsolete')) {
        result += badges.ObsoleteBadge;
        result += '<s class="obsoleteElement">';
    }
    
    if (rtlLocales.indexOf(locale) != -1) {
        result += '<bdi>';
    }
    
    if (slug == aPage.slug) {
        result += '<em><code>' + aPage.title + '</code></em>'
    } else {
        result += '<a href="' + url + '" title="' + summary + '"><code>' + title + '</code></a>' + cta;
    }
    
    if (rtlLocales.indexOf(locale) != -1) {
        result += '</bdi>';
    }
    
    if (hasTag(aPage, 'Obsolete')) {
        result += '</s>';
    }
    
    result += '</li>';
  }

  result += '</ol></li>';

  return result;
}

function buildSidebar(slug) {
  if (!slug) {
    return;
  }
  
  var pathComponents = slug.split("/");
  if (pathComponents < 2) {
    return;
  }
  
  // find out where we are in the tree
  var leafDocument = pathComponents[pathComponents.length-1];
  // 1) we are at the root
  if (leafDocument == "API") {
    buildSidebarForRoot(slug);
  }
  else {
    parentDocument = pathComponents[pathComponents.length-2];
    var apiPath = "";
    if (parentDocument == "API") {
      // 2) we are at an API overview
      apiPath = slug;
      buildSidebarForAPI(apiPath, leafDocument);

    }
    else {
      // 3) we are at an API component page (method, property, ...)
      apiPath = slug.slice(0, apiPath.length - (leafDocument.length + 1));
      buildSidebarForAPI(apiPath, parentDocument);

    }
  }
}

function buildSidebarForRoot(path) {
  output = '<section class="Quick_links" id="Quick_Links"><ol>';
  var subpages = pageModule.subpagesExpand("/en-US/docs/" + path);
  output += buildSublist(subpages, "API Reference");
  output += '</ol></section>';
}

function buildSidebarForAPI(path, parent) {
  output = '<section class="Quick_links" id="Quick_Links"><ol>';
  var subpages = pageModule.subpagesExpand("/en-US/docs/" + path);
  output += buildSublist(subpages, parent);
  output += '</ol></section>';
}

buildSidebar(env.slug);

output += 'goodbye<br/>';
%>

<%-output%>
