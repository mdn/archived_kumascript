<%

var desktopBrowsers = [
  "Edge",
  "Firefox",
  "Chrome",
  "Opera"
];

var mobileBrowsers = [
  "Firefox"
];

function writeTableHead(desktopBrowserNames, mobileBrowserNames) {

  var desktopWidth = (desktopBrowserNames.length / (desktopBrowserNames.length + mobileBrowserNames.length) * 100) * 0.6;
  var mobileWidth = (mobileBrowserNames.length / (desktopBrowserNames.length + mobileBrowserNames.length) * 100) * 0.6;

  var output = '<table class="webext-summary-compat-table">\n' +
               '  <thead>\n' +
               '    <tr>\n' +
               '      <th colspan=1 style="width: 40%"></th>\n' +
               '      <th colspan=' + desktopBrowserNames.length + ' style="width:' + desktopWidth + '%"' + '>Desktop</th>\n' +
               '      <th colspan=' + mobileBrowserNames.length + ' style="width:' + mobileWidth + '%"' + '>Mobile</th>\n' +
               '    </tr>\n';

  output += '    <tr>\n' +
              '      <th></th>\n';
  for (var i = 0; i < desktopBrowserNames.length; i++) {
    output += '      <th>' + desktopBrowserNames[i] + '</th>\n';
  }
  for (var i = 0; i < mobileBrowserNames.length; i++) {
    output += '      <th>' + mobileBrowserNames[i] + '</th>\n';
  }
  output += '    </tr>\n';
  output += '  </thead>\n';
  return output;
}

function writeTableCells(columns, name, data, notesCollection) {
  var output = "";

  for (var i = 0; i < columns.length; i++) {
    var supported = data[columns[i]].support;
    var supportedClass = "unknown-support";
    if (supported == "Unknown") {
        supported = "?";
    } else if (supported == "No") {
        supportedClass = "no-support";
    } else {
        supportedClass = "full-support";
    }
    var notes = data[columns[i]].notes;
    if (notes) {
      var id = name + "-" + columns[i].replace(/ /g, '-');
      supported += '<a href="#' + id + '"><strong><sup>' + (notesCollection.length + 1) + '</sup></strong></a>';
      var newNote = {
          anchor: id,
          content: notes
      }
      notesCollection.push(newNote);
    }
    output += '      <td class="' + supportedClass + '">' + supported + '</td>\n';
  }
  
  return output;
}

function writeNotes(notesCollection) {
  if (!notesCollection.length) {
      return "";
  }
  var output = "<p>";
  for (var i = 0; i < notesCollection.length; i++) {
    var note = notesCollection[i];
    output += '<a name="' + note.anchor + '">' + (i+1) + '. ' + note.content + '</a><br/>';
  }
  output += "</p>";
  return output;
}


function tableForModule(compatData) {
  var apiElementNames = Object.keys(compatData).sort();
  var notesCollection = [];

  var output = writeTableHead(desktopBrowsers, mobileBrowsers);

  output += '  <tbody>\n';  
  for (var i = 0; i < apiElementNames.length; i++) {
        
    var apiElementName = apiElementNames[i];
    var apiElementData = compatData[apiElementName];

    output += '    <tr>\n';
    output += '      <td><code>' + apiElementName + '</code></td>\n';
    output += writeTableCells(desktopBrowsers, apiElementName, apiElementData["desktop_browsers"], notesCollection);
    output += writeTableCells(mobileBrowsers, apiElementName, apiElementData["mobile_browsers"], notesCollection);
    output += '    </tr>\n';
  }
  output += '  </tbody>\n' +
            '</table>';

  output += writeNotes(notesCollection);
  return output;
}

function tableForAPI(compatData) {
  var notesCollection = [];
  var output = writeTableHead(desktopBrowsers, mobileBrowsers);

  output += '  <tbody>\n' +
            '    <tr>\n' +
            '      <td>Basic Support</td>\n';
  output += writeTableCells(desktopBrowsers, null, compatData["desktop_browsers"], notesCollection);
  output += writeTableCells(mobileBrowsers, null, compatData["mobile_browsers"], notesCollection);
  output += '    </tr>\n' +
            '  </tbody>\n' +
            '</table>';

  output += writeNotes(notesCollection);

  return output;
}

var output = "";
if ($1 == "api") {
  output = tableForModule($0, $2);
} else if ($1 == "api-item") {
  output = tableForAPI($0);
}

%>
<%-output%>
