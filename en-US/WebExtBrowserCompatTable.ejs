<%

var desktopBrowsers = [
  "Edge",
  "Firefox",
  "Chrome",
  "Opera"
];

var mobileBrowsers = [
  "Firefox"
];

var s_header = mdn.localString({
  "en-US": [ "Desktop", "Mobile" ],
  "cs":    [ "Plocha", "Mobile" ],
  "ja":    [ "デスクトップ", "モバイル" ],
  "pl":    [ "Pulpit", "Mobile" ],
  "de":    [ "Desktop", "Mobile" ],
  "ru":    [ "Настольные", "Мобильные" ],
  "fr":    [ "Ordinateur", "Mobile" ]
});

function initCompatTableMacro() {
  var output = '<div class="htab">' +
                '    <a id="AutoCompatibilityTable" name="AutoCompatibilityTable"></a>' +
                '    <ul>' +
                '        <li class="selected"><a href="javascript:;">' + s_header[0] + '</a></li>' +
                '        <li><a href="javascript:;">' + s_header[1] + '</a></li>' + 
                '    </ul>';
  return output;
}

function finalizeCompatTableMacro() {
  return '</div>';
}

function writeTableRow(columns, name, data, notesCollection) {
  var output = "";

  output += '<tr>';
  if (name) {
    output += '<td><code>' + name + '</code></td>';
  } else {
    output += '<td>Basic support</td>';
  }
  for (var i = 0; i < columns.length; i++) {
    var supported = data[columns[i]].support;
    if (supported == "Unknown") {
        supported = "?";
    }
    var notes = data[columns[i]].notes;
    if (notes) {
      var id = name + "-" + columns[i].replace(/ /g, '-');
      supported += '<a href="#' + id + '"><strong><sup>' + (notesCollection.length + 1) + '</sup></strong></a>';
      var newNote = {
          anchor: id,
          content: notes
      }
      notesCollection.push(newNote);
    }
    output += '<td>' + supported + '</td>';
  }
  output += '</tr>';
  
  return output;
}

function writeNotes(notesCollection) {
  if (!notesCollection.length) {
      return "";
  }
  var output = "<p>";
  for (var i = 0; i < notesCollection.length; i++) {
    var note = notesCollection[i];
    output += '<a name="' + note.anchor + '">' + (i+1) + '. ' + note.content + '</a><br/>';
  }
  output += "</p>";
  return output;
}

function initTable(id, browsers) {
  var output = '<div id="' + id + '">' +
               '<table class="compat-table">' +
               '<tbody>' +
               '<tr>' +
               '<th></th>';
  for (var i = 0; i < browsers.length; i++) {
    output += '<th>' + browsers[i] + '</th>';
  }
  output += '</tr>';
  return output;
}

function finalizeTable(output) {
  return output + '</tbody></table></div>';
}

function initTables() {
  return {
          desktopTable: initTable('compat-desktop', desktopBrowsers),
          mobileTable: initTable('compat-mobile', mobileBrowsers)
         }
}

function writeOutput(tables, notesCollection) {
  desktopTable = finalizeTable(tables.desktopTable);
  mobileTable = finalizeTable(tables.mobileTable);

  output = initCompatTableMacro();
  output += desktopTable;
  output += mobileTable;
  output += finalizeCompatTableMacro();
  output += writeNotes(notesCollection);

  return output;
}

function tableForModule(compatData) {
  var tables = initTables();
    
  var apiElementNames = Object.keys(compatData).sort();
  var notesCollection = [];

  for (var i = 0; i < apiElementNames.length; i++) {
    var apiElementName = apiElementNames[i];
    var apiElementData = compatData[apiElementName];

    tables.desktopTable += writeTableRow(desktopBrowsers, apiElementName, compatData["desktop_browsers"], notesCollection);
    tables.mobileTable += writeTableRow(mobileBrowsers, apiElementName, compatData["mobile_browsers"], notesCollection); 
  }

  return writeOutput(tables, notesCollection);
}

function tableForAPI(compatData) {
  var tables = initTables();

  var notesCollection = [];

  tables.desktopTable += writeTableRow(desktopBrowsers, null, compatData["desktop_browsers"], notesCollection);
  tables.mobileTable += writeTableRow(mobileBrowsers, null, compatData["mobile_browsers"], notesCollection); 

  return writeOutput(tables, notesCollection);
}

var output = "";

if ($1 == "api") {
  output = tableForModule($0);
} else if ($1 == "api-item") {
  output = tableForAPI($0);
}

%>
<%-output%>
