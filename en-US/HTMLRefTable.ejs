<%
// This template allows to build reference tables for HTML
//
// Param:
// $0 : An optional tag to filter the list of HTML elements or a configuration object
//      The configuration object get to optional parameters:
//      * include : An array of tags, the HTML Element page must have one of them to be listed
//      * exclude : An array of tags, the HTML Element page must NOT have any of them to be listed

var l10n = {
    element : mdn.localString({
        "en-US": "Element",
        "fr"   : "Élément"
    }),
    description : mdn.localString({
        "en-US": "Description"
    }),
};

var tag, badge,
    TagFilters = {
        include : typeof $0 === 'string' ? [$0]
                : $0 && $0.include && Array.isArray($0.include) ? $0.include
                : [],
        exclude : $0 && $0.exclude && Array.isArray($0.exclude) ? $0.exclude
                : []
    }
    RGXCleanTag    = /[<>]/g,
    HTMLRefBaseURL = "/docs/Web/HTML/Element",
    HTMLLocalBaseURL = "/" + env.locale + HTMLRefBaseURL + "/",
    HTMLDocPages   = page.subpagesExpand("/en-US" + HTMLRefBaseURL),
    HTMLTags       = [];

function hasCommonTag(A, B) {
    if (!Array.isArray(A) || !Array.isArray(A)) return false;

    // We check tag as case insensitive.
    var fn = function (v) { return v.toLowerCase(); };
    
    // To fasten check, we make sure b is always the smaller array.
    var a = A.length >= B.length ? A.map(fn) : B.map(fn);
    var b = A.length >= B.length ? B.map(fn) : A.map(fn);
    
    for (var i in b) {
        if (a.indexOf(b[i]) > -1) return true;    
    }

    return false;
}

// Get the relevant pages
HTMLDocPages.forEach(function (page) {
    var p, t, o;

    if ((TagFilters.include.length === 0 ||  hasCommonTag(page.tags, TagFilters.include))
    &&  (TagFilters.exclude.length === 0 || !hasCommonTag(page.tags, TagFilters.exclude))) {
        t = page.title.replace(RGXCleanTag, "");
        p = wiki.getPage(HTMLLocalBaseURL + t);

        HTMLTags.push({
            tagName      : t,
            tagLink      : t.toLowerCase() !== 'heading elements' ? template("HTMLelement", [t])
                         : ['h1','h2','h3','h4','h5','h6'].map(function (tg) { return template("HTMLelement", [tg]); }).join(', '),
            summary      : (p && p.summary) || "",
            deprecated   : hasCommonTag(page.tags, ['deprecated', 'obsolete']),
            experimental : hasCommonTag(page.tags, ['experimental']),
            html5        : hasCommonTag(page.tags, ['HTML5'])
        });
    }
});
%>
<table class="standard-table">
 <thead>
  <tr>
   <th scope="col">&nbsp;</th>
   <th scope="col"><%- l10n.element %></th>
   <th scope="col"><%- l10n.description %></th>
  </tr>
 </thead>
 <tbody>
 <%
 for (var i = 0, l = HTMLTags.length; i < l; i++) {
    badge = HTMLTags[i].html5        ? '<a href="/' + env.locale + '/docs/HTML/HTML5"><img alt="HTML5" src="/files/3843/HTML5_Badge_32.png" width="16" height="16"></a>'
          : HTMLTags[i].experimental ? template("FontAwesomeIcon", ["icon-cogs"])
          : '&nbsp;';
    
    /* Curent CSS styles provide a bad contrast so we avoid doing this yet.
    if (HTMLTags[i].deprecated) {
        tag = '<s class="obsoleteElement deprecatedElement">' + HTMLTags[i].tagLink + '</s>';
    } else {
        tag = HTMLTags[i].tagLink;
    }
    */
 %>
  <tr>
   <td style="vertical-align: top;"><%- badge %></td>
   <td style="vertical-align: top;"><%- HTMLTags[i].tagLink %></td>
   <td><%- HTMLTags[i].summary %></td>
  </tr>
<%
}
%>
 </tbody>
</table>
