<% 
/*
  Displays general information about a CSS property or descriptor

  $0 - property/descriptor name - defaults to the slug name
  $1 - @-rule - defaults to the @-rule within the URL
*/

function getInitialValue(mdn, propertyOrDescriptor, atRule) {
    if (atRule) {
        if (data.atRules[atRule] && data.atRules[atRule].descriptors &&
            data.atRules[atRule].descriptors[propertyOrDescriptor]) {
            return data.atRules[atRule].descriptors[propertyOrDescriptor].
                initial;
        }
    } else if (data.properties[propertyOrDescriptor]) {
        var property = data.properties[propertyOrDescriptor];
        if (property.shorthand) {
            var initialValue = mdn.getLocalString(localStrings,
                "longhandConcatination") + "<ul>";
            property.longhands.forEach(function(longhand) {
                initialValue += "<li><code>" + longhand + "</code>: ";
                if (data.properties[longhand] &&
                    data.properties[longhand].shorthand) {
                    initialValue += getInitialValue(mdn, longhand);
                } else {
                    initialValue += (data.properties[longhand] ?
                        data.properties[longhand].initial :
                        mdn.getLocalString(localStrings, "missing"));
                }
                initialValue += "</li>";
            });
            initialValue += "</ul>";
            return initialValue;
        } else {
            return data.properties[propertyOrDescriptor].initial;
        }
    }

    return "";
}


var data = string.deserialize(template("CSSData"));
var slug = env.slug;
var locale = env.locale;

var name = $0 || slug.split("/").pop();
var atRule = $1;

var localStrings = {
    "missing": {
        "en-US": "Value not found in DB!",
        "de"   : "Wert nicht in der DB gefunden!"
    },
    "inherited": {
        "en-US": "Inherited",
        "de"   : "Vererbt"
    },
    // Plural form
    "media": {
        "ja" : "メディア",
        "fr" : "Média",
        "de" : "Medien",
        "en-US" : "Media",
        "zh-CN" : "适用媒体" 
    },
    "yes": {
        "en-US": "yes",
        "de"   : "Ja",
        "fr"   : "oui",
        "ja"   : "継承する"
    },
    "no": {
        "en-US": "no",
        "de"   : "Nein",
        "fr"   : "non",
        "ja"   : "継承しない"
    },
    "longhandConcatination": {
        "en-US": "the concatenation of the initial values of its longhand properties:",
        "de"   : "Die Verkettung der Initialwerte der Langform Eigenschaften:",
        "fr"   : "La concaténation des valeurs initiales des propriétés associées :",
        "ja"   : "以下の各ロングハンドプロパティの初期値が使用されます:"
    }
};

if (!atRule) {
    var matches = slug.match(/\/CSS\/(@.+?)(?=\/)/);
    if (matches) {
        atRule = matches[1];
    }
}

if (atRule) {
    if (data.atRules[atRule] && data.atRules[atRule].descriptors) {
        cssInfo = data.atRules[atRule].descriptors[name];
    }
} else if (data.properties[name]) {
    cssInfo = data.properties[name];
}

var result = "<ul class=\"cssprop\">";

// Displays information about the initial value of the item
result += "<li><dfn>" + template("Xref_cssinitial") + "</dfn> " +
    getInitialValue(mdn, name, atRule) + "</li>";

// Displays information about whether the item's value is inherited
result += "<li><dfn>" + template("Xref_cssinherited") + "</dfn> " +
    (cssInfo.inherited ?
        mdn.getLocalString(localStrings, "yes") :
        mdn.getLocalString(localStrings, "no")) +
    "</li>";

// Displays information about the media the item applies to
// We have a general link to @media here. When https://bugzil.la/1133414 is
// fixed, we may change the link.
result += "<li><dfn><a href=\"/" + locale + "/docs/Web/CSS/@media\">" +
    mdn.getLocalString(localStrings, "media") + "</a></dfn> " + cssInfo.media +
    "</li>";

result += "</ul>";

%><%- result %>
