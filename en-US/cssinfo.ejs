<% 
/*
  Displays general information about a CSS property or descriptor

  $0 - property/descriptor name - defaults to the slug name
  $1 - @-rule - defaults to the @-rule within the URL
*/

var data = string.deserialize(template("CSSData"));
var slug = env.slug;
var locale = env.locale;

var name = $0 || slug.split("/").pop();
var atRule = $1;

var localStrings = {
    "missing": {
        "en-US": "Value not found in DB!",
        "de"   : "Wert nicht in der DB gefunden!"
    },
    "inherited": {
        "en-US": "Inherited",
        "de"   : "Vererbt"
    },
    "yes": {
        "en-US": "yes",
        "de"   : "Ja",
        "fr"   : "oui",
        "ja"   : "継承する"
    },
    "no": {
        "en-US": "no",
        "de"   : "Nein",
        "fr"   : "non",
        "ja"   : "継承しない"
    }
};

if (!atRule) {
    var matches = slug.match(/\/CSS\/(@.+?)(?=\/)/);
    if (matches) {
        atRule = matches[1];
    }
}

if (atRule) {
    if (data.atRules[atRule] && data.atRules[atRule].descriptors) {
        cssInfo = data.atRules[atRule].descriptors[name];
    }
} else if (data.properties[name]) {
    cssInfo = data.properties[name];
}

var result = "<ul class=\"cssprop\">";

result += "<li><dfn>" + template("Xref_cssinherited") + "</dfn> " +
    (cssInfo.inherited ?
        mdn.getLocalString(localStrings, "yes") :
        mdn.getLocalString(localStrings, "no")) +
    "</li>";

result += "</ul>";

%><%- result %>
